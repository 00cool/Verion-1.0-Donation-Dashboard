{"version":3,"file":"w-clock.component.js","sourceRoot":"","sources":["../../../../../src/app/components/w-clock/w-clock.component.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAE1F,uBAAuB;;AACvB,MAAM,CAAN,IAAY,UAGX;;AAHD,WAAY,UAAU;IAClB,6CAAS,CAAA;IACT,iDAAW,CAAA;GAFH,UAAU,KAAV,UAAU,QAGrB;AAUA,CAAC;;;8BAqOyD,IAAI,YAAY,EAAE;0BAG3C,IAAI,YAAY,EAAc;qBAI7C,IAAI,KAAK,EAAU;;IAMlC,qCAAW,GAAX;QAEI,IAAI,CAAC,OAAO,EAAE,CAAC;KAClB;IAGO,iCAAO,GAAf;QAEI,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAU,CAAC;QAEjC,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YAEvB,KAAK,UAAU,CAAC,KAAK;gBAEjB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBAE7C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACnB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,CAAC;oBAEhD,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;wBAE/C,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;qBACjD;iBACJ;gBACD,KAAK,CAAC;YAEV,KAAK,UAAU,CAAC,OAAO;gBAEnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;oBAE9B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACtB;gBACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,CAAC;gBAClD,KAAK,CAAC;SACb;KACJ;IAEM,yCAAe,GAAtB;QAEI,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YAEvB,KAAK,UAAU,CAAC,KAAK;gBACjB,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAC/B,KAAK,CAAC;YAEV,KAAK,UAAU,CAAC,OAAO;gBACnB,OAAO,GAAG,EAAE,CAAC;gBACb,KAAK,CAAC;SACb;QAED,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,KAAK,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;YACxC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC;SACpE;QAAC,IAAI,CAAC,CAAC;YACJ,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC;SACtE;QAED,IAAM,KAAK,GAAG;YAEV,mBAAmB,EAAE,SAAS,GAAG,OAAO,GAAG,MAAM;YACjD,eAAe,EAAE,SAAS,GAAG,OAAO,GAAG,MAAM;YAC7C,WAAW,EAAE,SAAS,GAAG,OAAO,GAAG,MAAM;SAC5C,CAAC;QAEF,MAAM,CAAC,KAAK,CAAC;KAChB;IAEO,2CAAiB,GAAzB,UAA0B,IAAY,EAAE,KAAa;QAEjD,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,KAAK,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;SAC9C;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,EAAE,CAAC;SAC5B;QACD,IAAI,OAAO,GAAG,0BAA0B,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;QAEzE,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,KAAK,IAAI,CAAC,CAAC,CAAC;YAEjC,OAAO,IAAI,cAAc,CAAC;SAC7B;QAED,MAAM,CAAC,OAAO,CAAC;KAClB;IAEO,yCAAe,GAAvB,UAAwB,IAAY;QAEhC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,KAAK,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;;YAG1B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SAC5C;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC;;YAG5B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;SAC1C;QACD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;KAC1C;;gBApVJ,SAAS,SAAC;oBACP,QAAQ,EAAE,SAAS;oBACnB,QAAQ,EAAE,mpCAwBC;oBAEX,MAAM,EAAE,CAAC,+zIAiMR,CAAC;iBAEL;;;;;6BAGI,KAAK;mCACL,MAAM;gCAEN,KAAK;+BACL,MAAM;0BAEN,KAAK;;0BA3PV;;SAmPa,eAAe","sourcesContent":["\nimport { Component, OnInit, Input, Output, EventEmitter, OnChanges } from '@angular/core';\n\n// Current type to show\nexport enum CLOCK_TYPE {\n    HOURS = 1,\n    MINUTES = 2\n}\n\nexport type TimeFormat = 12 | 24;\n\nexport interface ITime {\n\n    hour: number;\n    minute: number;\n    meriden: 'PM' | 'AM';\n    format: TimeFormat;\n};\n\n@Component({\n    selector: 'w-clock',\n    template: `\n        <div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"w-clock-wrapper\">\n            <div class=\"w-clock\">\n                <div class=\"w-clock-container\">\n                    \n                    <!-- Clock center -->\n                    <button  mat-mini-fab [color]=\"color\" class=\"w-clock-center\"></button>\n\n                    <!-- Clock hand -->\n                    <mat-toolbar [ngStyle]=\"getPointerStyle()\" [color]=\"color\" class=\"w-pointer\">\n                        <button mat-mini-fab [color]=\"color\" class=\"w-clock-selected\"></button>\n                    </mat-toolbar>\n                    \n                    <!-- Hour / Minute number faces -->\n                    <div *ngFor=\"let step of steps; let i = index\" [class]=\"getTimeValueClass(step, i)\" >\n                        <button mat-mini-fab\n                            [color]=\"selectedTimePart === step ? color : ''\"\n                            (click)=\"changeTimeValue(step)\">\n                            {{ step }}\n                        </button>\n                    </div>\n\n                </div>\n            </div>\n        </div>`,\n\n    styles: [`  \n        .w-clock-wrapper {\n            height: 100%;\n            padding: 0 24px;\n        \n        }\n        \n        .w-clock {\n        width: 200px;\n        height: 200px;\n        border-radius: 50%;\n        cursor: pointer;\n        padding: 24px;\n        background: #ededed;\n        }\n        .w-clock-container {\n            width: 100%;\n            height: 100%;\n            position: relative;\n            display: block;\n        }\n        .w-clock-center {\n            height: 6px;\n            width: 6px;\n            position: absolute;\n            left: 0;\n            right: 0;\n            top: 0;\n            bottom: 0;\n            margin: auto;\n            border-radius: 50%;\n        }\n        .w-pointer {\n            box-shadow: none;\n            width: 1px;\n            height: 50%;\n            position: absolute;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            margin: 0 auto;\n            padding: 0;\n            transform-origin: top center;\n            transition: transform 200ms;\n            z-index: 0;\n            pointer-events: none;\n        }\n        .w-clock-step {\n            display: block;\n            position: absolute;\n            transform: translate(-50%, -50%);\n            transition: transform 200ms;\n        }\n        .w-clock-step .mat-mini-fab {\n            box-shadow: none;\n            background-color: transparent;\n            }\n        \n        .w-clock-selected {\n            position: absolute;\n            bottom: -19px;\n            left: -19px;\n            min-width: 0;\n            min-height: 0;\n            pointer-events: none;\n            box-shadow: none;\n            cursor: none;\n        }\n            \n        .w-clock-deg0 {\n            top: 0%;\n            left: 50%;\n        }\n        \n        .w-clock-deg15 {\n            top: 1.70370869%;\n            left: 62.94095226%;\n        }\n        \n        .w-clock-deg30 {\n            top: 6.69872981%;\n            left: 75%;\n        }\n        \n        .w-clock-deg45 {\n            top: 14.64466094%;\n            left: 85.35533905%;\n        }\n        \n        .w-clock-deg60 {\n            top: 25%;\n            left: 93.30127019%;\n        }\n        \n        .w-clock-deg75 {\n            top: 37.05904774%;\n            left: 98.29629131%;\n        }\n        \n        .w-clock-deg90 {\n            top: 50%;\n            left: 100%;\n        }\n        \n        .w-clock-deg105 {\n            top: 62.94095226%;\n            left: 98.29629131%;\n        }\n        \n        .w-clock-deg120 {\n            top: 75%;\n            left: 93.30127019%;\n        }\n        \n        .w-clock-deg135 {\n            top: 85.35533906%;\n            left: 85.35533906%;\n        }\n        \n        .w-clock-deg150 {\n            top: 93.30127019%;\n            left: 75%;\n        }\n        \n        .w-clock-deg165 {\n            top: 98.29629131%;\n            left: 62.94095226%;\n        }\n        \n        .w-clock-deg180 {\n            top: 100%;\n            left: 50%;\n        }\n        \n        .w-clock-deg195 {\n            top: 98.29629131%;\n            left: 37.05904774%;\n        }\n        \n        .w-clock-deg210 {\n            top: 93.30127019%;\n            left: 25%;\n        }\n        \n        .w-clock-deg225 {\n            top: 85.35533906%;\n            left: 14.64466094%;\n        }\n        \n        .w-clock-deg240 {\n            top: 75%;\n            left: 6.69872981%;\n        }\n        \n        .w-clock-deg255 {\n            top: 62.94095226%;\n            left: 1.703708686%;\n        }\n        \n        .w-clock-deg270 {\n            top: 50%;\n            left: 0%;\n        }\n        \n        .w-clock-deg285 {\n            top: 37.05904774%;\n            left: 1.703708686%;\n        }\n        \n        .w-clock-deg300 {\n            top: 25%;\n            left: 6.69872981%;\n        }\n        \n        .w-clock-deg315 {\n            top: 14.64466094%;\n            left: 14.64466094%;\n        }\n        \n        .w-clock-deg330 {\n            top: 6.69872981%;\n            left: 25%;\n        }\n        \n        .w-clock-deg345 {\n            top: 1.703708686%;\n            left: 37.05904774%;\n        }\n        \n        .w-clock-deg360 {\n            top: 0%;\n            left: 50%;\n        }    \n    `],\n        \n})\nexport class WClockComponent implements OnChanges {\n\n    @Input() public userTime: ITime;\n    @Output() public userTimeChange: EventEmitter<ITime> = new EventEmitter();\n\n    @Input() public currentView: CLOCK_TYPE;\n    @Output() public viewChange = new EventEmitter<CLOCK_TYPE>();\n\n    @Input() public color: string;\n\n    public steps = new Array<number>();\n    private selectedTimePart: any;\n    private STEP_DEG: number;\n\n\n\n    ngOnChanges() {\n\n        this.setupUI();\n    }\n\n\n    private setupUI() {\n\n        this.steps = new Array<number>();\n\n        switch (this.currentView) {\n\n            case CLOCK_TYPE.HOURS:\n\n                for (let i = 1; i <= this.userTime.format; i++) {\n\n                    this.steps.push(i);\n                    this.selectedTimePart = this.userTime.hour || 0;\n\n                    if (this.selectedTimePart > this.userTime.format) {\n\n                        this.selectedTimePart -= this.userTime.format;\n                    }\n                }\n                break;\n\n            case CLOCK_TYPE.MINUTES:\n\n                for (let i = 5; i <= 55; i += 5) {\n\n                    this.steps.push(i);\n                }\n                this.steps.push(0);\n                this.selectedTimePart = this.userTime.minute || 0;\n                break;\n        }\n    }\n\n    public getPointerStyle() {\n\n        let divider = 1;\n        switch (this.currentView) {\n\n            case CLOCK_TYPE.HOURS:\n                divider = this.userTime.format;\n                break;\n\n            case CLOCK_TYPE.MINUTES:\n                divider = 60;\n                break;\n        }\n\n        let degrees = 0;\n        if (this.currentView === CLOCK_TYPE.HOURS) {\n            degrees = Math.round(this.userTime.hour * (360 / divider)) - 180;\n        } else {\n            degrees = Math.round(this.userTime.minute * (360 / divider)) - 180;\n        }\n\n        const style = {\n\n            '-webkit-transform': 'rotate(' + degrees + 'deg)',\n            '-ms-transform': 'rotate(' + degrees + 'deg)',\n            'transform': 'rotate(' + degrees + 'deg)'\n        };\n\n        return style;\n    }\n\n    private getTimeValueClass(step: number, index: number) {\n\n        if (this.currentView === CLOCK_TYPE.HOURS) {\n            this.STEP_DEG = 360 / this.userTime.format;\n        } else {\n            this.STEP_DEG = 360 / 12;\n        }\n        let classes = 'w-clock-step w-clock-deg' + (this.STEP_DEG * (index + 1));\n\n        if (this.selectedTimePart === step) {\n\n            classes += ' mat-primary';\n        }\n\n        return classes;\n    }\n\n    private changeTimeValue(step: number) {\n\n        if (this.currentView === CLOCK_TYPE.HOURS) {\n            this.userTime.hour = step;\n\n            // auto switch to minutes\n            this.viewChange.emit(CLOCK_TYPE.MINUTES);\n        } else {\n            this.userTime.minute = step;\n\n            // auto switch to hours\n            this.viewChange.emit(CLOCK_TYPE.HOURS);\n        }\n        this.userTimeChange.emit(this.userTime)\n    }\n}\n"]}